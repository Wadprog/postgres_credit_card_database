/*
Program 8 adds a new transaction. 
Each time the program is executed, 
it takes a vendor number, an account number, and an amount from the user. 
The program first checks the validity of the vendor number and account number. 
The transaction number is generated by the program. ✅
The date of the transaction should be the date on which the program is executed and assigned by the computer automatically. ✅
The program stores the new transaction into the transaction table, ✅
it then updates the balances of the related customer and vendor with the amount of the new transaction. ✅
It then displays the new transaction, and the updated customer and vendor records.
Date : Tuesday november 1 2022
Author : Wadson Vaval 
OWNER : Karla Gomez
*/

DROP FUNCTION IF EXISTS fn_new_transaction(INT , INT , INT);
CREATE OR REPLACE FUNCTION fn_new_transaction(_vendor_number INT, _account_number INT, _amount INT) 
RETURNS TABLE(trx_number INT ,cst_name VARCHAR,vendor_name VARCHAR, cst_balance INT, vendor_balance INT , trx_amount INT, trx_account_number INT, trx_vendor_number INT)
 LANGUAGE plpgsql AS
$$
BEGIN

INSERT INTO transaction(account_number, vendor_number, amount)VALUES(_account_number, _vendor_number, _amount);

UPDATE customer AS c SET balance= _amount WHERE c.account_number = _account_number ;
UPDATE vendor AS v SET balance = _amount WHERE v.vendor_number= _vendor_number;

RETURN QUERY
SELECT 
t.transaction_number AS trx_number,
c.name AS cst_name,
v.name AS vendor_name, 
c.balance AS cst_balance, 
v.balance AS vendor_balance,
t.amount AS trx_amount,
t.account_number AS trx_account_number, 
t.vendor_number AS trx_vendor_number
FROM transaction AS t 
LEFT JOIN customer c USING(account_number)
LEFT JOIN vendor v USING(vendor_number)
WHERE t.vendor_number = _vendor_number 
AND t.account_number= _account_number;



END;
$$;

SELECT * FROM fn_new_transaction(3,2,2000);